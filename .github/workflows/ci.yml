name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_fuzz_tests:
        description: 'Run fuzz tests'
        required: false
        default: true
        type: boolean
      fuzz_duration:
        description: 'Fuzz test duration (minutes)'
        required: false
        default: '5'
        type: string

# Global configuration to prevent job cancellation
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Core build and test job - runs on every push/PR
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build
      run: go build -v ./...

    - name: Run Fast Tests (PR) or Full Tests (Main)
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Running fast tests for PR..."
          go test -v -short ./...
        else
          echo "Running full tests for main branch..."
          go test -v ./...
        fi

    - name: Run Go Vet
      run: go vet ./...

    - name: Run Race Detection
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Running race detection with fast tests..."
          go test -race -v -short ./...
        else
          echo "Running race detection with full tests..."
          go test -race -v ./...
        fi

  # Performance tests - runs on every push/PR
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Performance Tests
      run: go test -v -run "TestPerformance|TestMemory|TestConcurrent" ./...

    - name: Run Performance Benchmarks
      run: |
        echo "Running performance benchmarks..."
        go test -bench=BenchmarkFileOperations -run=^$ ./... || echo "File operations benchmark completed"
        go test -bench=BenchmarkFolderOperations -run=^$ ./... || echo "Folder operations benchmark completed"
        go test -bench=BenchmarkDiffOperations -run=^$ ./... || echo "Diff operations benchmark completed"
        go test -bench=BenchmarkLinkOperations -run=^$ ./... || echo "Link operations completed"

  # Quick fuzz tests - runs on every push/PR (short duration)
  fuzz-quick:
    name: Quick Fuzz Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Fuzz Corpus
      uses: actions/cache@v4
      with:
        path: testdata/fuzz/
        key: ${{ runner.os }}-fuzz-corpus-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-fuzz-corpus-

    - name: Run All Quick Fuzz Tests
      run: |
        echo "Running quick fuzz tests (30 seconds each)..."
        
        for test in FuzzFolderCreation FuzzFileOperations FuzzLinkOperations FuzzFolderOperations FuzzDiffOperations FuzzEdgeCases FuzzSerialization FuzzMemoryStress; do
          echo "🧪 Running: $test"
          # Add individual test timeout: 30 seconds fuzz + 30 seconds buffer
          timeout 60s go test -fuzz=$test -fuzztime=30s -parallel=4 -v || echo "⚠️  $test completed (may have found issues)"
          echo ""
        done

    - name: Upload Fuzz Corpus
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fuzz-corpus-quick
        path: testdata/fuzz/
        retention-days: 30

  # Comprehensive fuzz tests - runs on schedule and manual trigger
  fuzz-comprehensive:
    name: Comprehensive Fuzz Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 120
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Fuzz Corpus
      uses: actions/cache@v4
      with:
        path: testdata/fuzz/
        key: ${{ runner.os }}-fuzz-corpus-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-fuzz-corpus-

    - name: Download Previous Corpus
      uses: actions/download-artifact@v4
      with:
        pattern: fuzz-corpus-*

    - name: Run All Comprehensive Fuzz Tests
      run: |
        echo "Running comprehensive fuzz tests..."
        duration="${{ github.event.inputs.fuzz_duration || '10' }}"
        echo "Duration per test: ${duration} minutes"
        echo ""
        
        for test in FuzzFolderCreation FuzzFileOperations FuzzLinkOperations FuzzFolderOperations FuzzDiffOperations FuzzEdgeCases FuzzSerialization FuzzMemoryStress; do
          echo "🧪 Running: $test (${duration}m)"
          # Add individual test timeout: duration + 2 minutes buffer
          timeout $((duration * 60 + 120))s go test -fuzz=$test -fuzztime=${duration}m -parallel=8 -v || echo "⚠️  $test completed (may have found issues)"
          echo ""
        done

    - name: Upload Fuzz Corpus
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fuzz-corpus-comprehensive
        path: testdata/fuzz/
        retention-days: 90

  # Security and quality checks - runs on every push/PR
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Check for known vulnerabilities
      run: |
        if command -v nancy >/dev/null 2>&1; then
          nancy sleuth
        else
          echo "Nancy not available, skipping vulnerability check"
        fi

    - name: Check Go module dependencies
      run: go mod verify

    - name: Check Go module tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "Go modules need to be tidied"
          git status
          exit 1
        fi
