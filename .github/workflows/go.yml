# This workflow will build a golang project and run comprehensive fuzz tests
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build, Test & Fuzz

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run fuzz tests daily at 2 AM UTC to catch regressions
    - cron: '0 2 * * *'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Vet
      run: go vet ./...

  fuzz-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fuzz-test:
          - FuzzFolderCreation
          - FuzzFileOperations
          - FuzzLinkOperations
          - FuzzFolderOperations
          - FuzzDiffOperations
          - FuzzEdgeCases
          - FuzzSerialization
          - FuzzMemoryStress
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Install Go dependencies
      run: go mod download

    - name: Run Fuzz Test - ${{ matrix.fuzz-test }}
      run: |
        echo "üß™ Running fuzz test: ${{ matrix.fuzz-test }}"
        echo "‚è±Ô∏è  Duration: 2 minutes"
        echo "üë• Workers: 8"
        echo ""
        
        # Run the specific fuzz test for 2 minutes
        timeout 130s go test -fuzz=${{ matrix.fuzz-test }} -fuzztime=2m -parallel=8 -v || {
          echo "‚ùå Fuzz test ${{ matrix.fuzz-test }} found issues or timed out"
          exit 1
        }
        
        echo "‚úÖ Fuzz test ${{ matrix.fuzz-test }} completed successfully"

    - name: Upload Fuzz Corpus (if available)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fuzz-corpus-${{ matrix.fuzz-test }}
        path: |
          testdata/fuzz/${{ matrix.fuzz-test }}/
        retention-days: 30

  fuzz-regression:
    runs-on: ubuntu-latest
    needs: [build, fuzz-test]
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Download Fuzz Corpus
      uses: actions/download-artifact@v4
      with:
        pattern: fuzz-corpus-*

    - name: Run Regression Fuzz Tests
      run: |
        echo "üîÑ Running regression fuzz tests with existing corpus..."
        echo "‚è±Ô∏è  Duration: 5 minutes per test"
        echo ""
        
        # Run each fuzz test with longer duration for regression testing
        for test in FuzzFolderCreation FuzzFileOperations FuzzLinkOperations FuzzFolderOperations FuzzDiffOperations FuzzEdgeCases FuzzSerialization FuzzMemoryStress; do
          echo "üß™ Running regression test: $test"
          
          # Check if corpus exists
          if [ -d "testdata/fuzz/$test" ]; then
            echo "üìÅ Found existing corpus, running regression test..."
            timeout 320s go test -fuzz=$test -fuzztime=5m -parallel=8 -v || {
              echo "‚ùå Regression fuzz test $test found issues"
              exit 1
            }
          else
            echo "‚ö†Ô∏è  No corpus found for $test, skipping regression test"
          fi
          
          echo "‚úÖ Regression test $test completed"
          echo ""
        done

  security-scan:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Run Security Scan
      run: |
        echo "üîí Running security scan..."
        
        # Check for known vulnerabilities
        go list -json -deps ./... | nancy sleuth || {
          echo "‚ö†Ô∏è  Security vulnerabilities found"
          echo "Continuing build as this is informational only"
        }
        
        # Run with race detector
        echo "üèÉ Running tests with race detector..."
        go test -race -v ./... || {
          echo "‚ùå Race conditions detected"
          exit 1
        }
        
        echo "‚úÖ Security scan completed"

  coverage:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Generate Coverage Report
      run: |
        echo "üìä Generating coverage report..."
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 90
